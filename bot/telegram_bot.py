import os
import asyncio
import base64
import tempfile
import httpx
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import FSInputFile, ReplyKeyboardMarkup, KeyboardButton


from bot.monitoring.monitor import monitor

from bot.utils.fetch import fetch
load_dotenv()


# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ======
BOT_TOKEN = os.getenv("TG_BOT_TOKEN")
API_URL = "http://127.0.0.1:8000/api/v1/analyze/"
REPORT_ENDPOINT = f"{API_URL}report"

# ====== –∞–π–¥–∏—à–Ω–∏–∫ –∞–¥–º–∏–Ω–∞  ======
ADMIN_IDS = [1431784288]  # –í–∞—à ID –∏–ª–∏ —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
MONITORED_CHANNELS = set()  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ ( –í—Ä–µ–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –±–¥ )

if not BOT_TOKEN:
    raise ValueError("TG_BOT_TOKEN not provided.")

# ====== –ë–æ—Ç ======
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)


# ====== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ======
def get_main_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞"), KeyboardButton(text="üîó –ê–Ω–∞–ª–∏–∑ —Å—Å—ã–ª–∫–∏")],
            [KeyboardButton(text="üì¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤"), KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )




def get_back_to_main_keyboard():
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True
    )

def get_monitoring_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"), KeyboardButton(text="üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")],
            [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª"), KeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )


# ====== –•—ç–Ω–¥–ª–µ—Ä—ã ======
@router.message(CommandStart())
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Impulse Analyzer!

ü§ñ –Ø –ø–æ–º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è:
‚Ä¢ –†–µ–∫–ª–∞–º–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
‚Ä¢ –°–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö  
‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –º–∞—Ö–∏–Ω–∞—Ü–∏–∏
‚Ä¢ –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ö–µ–º—ã

üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!
    """

    await message.answer(welcome_text, reply_markup=get_main_keyboard())


@router.message(Command("help"))
@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def cmd_help(message: types.Message):
    """–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"""
    help_text = """
üìñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:

1. üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
2. üîó –ê–Ω–∞–ª–∏–∑ —Å—Å—ã–ª–∫–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Å—Ç –ø–æ —Å—Å—ã–ª–∫–µ
3. –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç/—Å—Å—ã–ª–∫—É

–ë–æ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –≤—ã–¥–∞—Å—Ç –æ—Ç—á–µ—Ç —Å –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏.
    """
    await message.answer(help_text, reply_markup=get_back_to_main_keyboard())


@router.message(F.text == "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await cmd_start(message)


@router.message(F.text == "üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞")
async def request_text_analysis(message: types.Message):
    """–ó–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    await message.answer(
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è:",
        reply_markup=get_back_to_main_keyboard()
    )


@router.message(F.text == "üîó –ê–Ω–∞–ª–∏–∑ —Å—Å—ã–ª–∫–∏")
async def request_link_analysis(message: types.Message):
    """–ó–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    await message.answer(
        "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram –ø–æ—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=get_back_to_main_keyboard()
    )


# ====== –•—ç–Ω–¥–ª–µ—Ä—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ======
@router.message(F.text == "üì¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤")
async def monitoring_menu(message: types.Message):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
    menu_text = """
üì¢ **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram –∫–∞–Ω–∞–ª–æ–≤**

–§—É–Ω–∫—Ü–∏–∏:
‚Ä¢ üì¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª - –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
‚Ä¢ üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏ - —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤  
‚Ä¢ ‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

–ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ –∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö.
    """
    await message.answer(menu_text, reply_markup=get_monitoring_keyboard())


@router.message(F.text == "üì¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")
async def add_channel_request(message: types.Message):
    """–ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    await message.answer(
        "‚û°Ô∏è **–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:**\n\n"
        "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω—É–∂–Ω—ã–π –∫–∞–Ω–∞–ª\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" 
        "3. –ù–∞–∂–º–∏—Ç–µ \"–ü–µ—Ä–µ—Å–ª–∞—Ç—å\"\n"
        "4. –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞\n\n"
        "üìù *–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç –∫–∞–Ω–∞–ª –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ*",
        reply_markup=get_back_to_main_keyboard(),
        parse_mode="Markdown"
    )


@router.message(F.forward_from_chat)
async def handle_forwarded_channel(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞"""
    try:
        channel = message.forward_from_chat

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–∞–Ω–∞–ª
        if channel.type != "channel":
            await message.answer("‚ùå –≠—Ç–æ –Ω–µ –∫–∞–Ω–∞–ª. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–º–µ–Ω–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞.")
            return

        channel_id = channel.id
        channel_title = channel.title
        channel_username = f"@{channel.username}" if channel.username else f"ID: {channel_id}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
        try:
            bot_member = await bot.get_chat_member(channel_id, (await bot.get_me()).id)
            if bot_member.status not in ['administrator', 'member']:
                await message.answer(
                    f"‚ùå **–ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª '{channel_title}'!**\n\n"
                    f"–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:\n"
                    f"1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                    f"2. –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                    f"3. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞",
                    reply_markup=get_monitoring_keyboard()
                )
                return
        except Exception as e:
            await message.answer(
                f"‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞:**\n{str(e)}\n\n"
                f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.",
                reply_markup=get_monitoring_keyboard()
            )
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
        if channel_id not in MONITORED_CHANNELS:
            MONITORED_CHANNELS.add(channel_id)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        subscription_id = channel_username
        if monitor.add_subscription(message.from_user.id, subscription_id):

            await message.answer(
                f"‚úÖ **–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!**\n\n"
                f"üì¢ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {channel_title}\n"
                f"üîó **ID:** {subscription_id}\n\n"
                f"–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –ø–æ—Å—Ç –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ "
                f"–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –æ—Ç—á–µ—Ç—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º –Ω–∞—Ä—É—à–µ–Ω–∏–π.",
                reply_markup=get_monitoring_keyboard()
            )

            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª: {channel_title} (ID: {channel_id}) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        else:
            await message.answer(
                f"‚ÑπÔ∏è –ö–∞–Ω–∞–ª '{channel_title}' —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è",
                reply_markup=get_monitoring_keyboard()
            )

    except Exception as e:
        await message.answer(
            f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞:**\n{str(e)}",
            reply_markup=get_monitoring_keyboard()
        )

@router.message(F.text == "üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
async def show_subscriptions(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    subscriptions = monitor.get_user_subscriptions(message.from_user.id)

    if not subscriptions:
        await message.answer("‚ùå –í—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
        return

    subscriptions_text = "üìã **–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:**\n\n" + "\n".join([f"‚Ä¢ {sub}" for sub in subscriptions])
    await message.answer(subscriptions_text)


@router.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª")
async def remove_channel_request(message: types.Message):
    """–ó–∞–ø—Ä–æ—Å username –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    subscriptions = monitor.get_user_subscriptions(message.from_user.id)

    if not subscriptions:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
        return

    subscriptions_text = "–í–≤–µ–¥–∏—Ç–µ @username –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n" + "\n".join([f"‚Ä¢ {sub}" for sub in subscriptions])
    await message.answer(subscriptions_text, reply_markup=get_back_to_main_keyboard())


@router.message(F.text.startswith('@'))
async def handle_channel_username(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ username –∫–∞–Ω–∞–ª–∞"""
    username = message.text.strip().lower()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ
    if username in [sub.lower() for sub in monitor.get_user_subscriptions(message.from_user.id)]:
        # –£–¥–∞–ª–µ–Ω–∏–µ
        monitor.remove_subscription(message.from_user.id, username)
        await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª {username} —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
    else:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
        if monitor.add_subscription(message.from_user.id, username):
            await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥!")
        else:
            await message.answer(f"‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –∫–∞–Ω–∞–ª {username}.")

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_monitoring_keyboard())


@router.message()
async def handle_text(message: types.Message):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –∏ —Å—Å—ã–ª–æ–∫"""
    text = message.text.strip()

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
    if text in ["üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞", "üîó –ê–Ω–∞–ª–∏–∑ —Å—Å—ã–ª–∫–∏", "‚ùì –ü–æ–º–æ—â—å", "üì¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", "üì¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤"]:
        return

    if not text:
        await message.answer(
            "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å—Å—ã–ª–∫—É.",
            reply_markup=get_main_keyboard()
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞
    status_msg = await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç...")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if text.startswith("https://t.me/"):
        content_type = "—Å—Å—ã–ª–∫–∞"
        analysis_text = await fetch(text)
        if not analysis_text:
            await status_msg.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ —Å—Å—ã–ª–∫–∏.")
            return
    else:
        content_type = "—Ç–µ–∫—Å—Ç"
        analysis_text = text

    try:
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
        async with httpx.AsyncClient(timeout=30.0) as client:
            resp = await client.post(REPORT_ENDPOINT, json={"text": analysis_text})
            resp.raise_for_status()
            data = resp.json()

        incidents = data.get("incidents", [])
        total_risk = data.get("total_risk", 0)
        risk_level = data.get("risk_level", "low")
        xlsx_base64 = data.get("xlsx_base64")
        recommendations = data.get("recommendations", "")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        results_text = f"""
‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:

üìä –¢–∏–ø: {content_type}
üö® –ù–∞—Ä—É—à–µ–Ω–∏–π: {len(incidents)}
‚ö° –†–∏—Å–∫: {total_risk} ({risk_level})
        """

        await status_msg.edit_text(results_text)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        if recommendations:
            await message.answer(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n{recommendations}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ XLSX –æ—Ç—á–µ—Ç–∞
        if xlsx_base64:
            xlsx_bytes = base64.b64decode(xlsx_base64)
            with tempfile.NamedTemporaryFile(suffix=".xlsx", delete=False) as tmp_file:
                tmp_file.write(xlsx_bytes)
                tmp_file_path = tmp_file.name

            await message.answer_document(
                FSInputFile(tmp_file_path, filename="security_report.xlsx"),
                caption="üìé –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"
            )
            os.remove(tmp_file_path)

    except httpx.TimeoutException:
        await status_msg.edit_text("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è.")
    except httpx.RequestError as e:
        await status_msg.edit_text(f"üîå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
    except Exception as e:
        await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())


# ====== –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ======
async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())