import os
import asyncio
import base64
import tempfile
import httpx

from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import CommandStart
from aiogram.types import FSInputFile
from bot.utils.escape_markdown import escape_markdown

from app.services.fetch import fetch
from app.services.gigachat_service import generate_recommendation

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ======
BOT_TOKEN = os.getenv("TG_BOT_TOKEN")
API_URL = os.getenv("API_URL", "http://127.0.0.1:8000/api/v1/analyze/")
REPORT_ENDPOINT = f"{API_URL}report"

if not BOT_TOKEN:
    raise ValueError("TG_BOT_TOKEN not provided. Set it in environment variables.")

# ====== –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ ======
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)


# ====== –•–µ–Ω–¥–ª–µ—Ä—ã ======
@router.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –∏–ª–∏ —Ç–µ–∫—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ‚Äî —è –ø—Ä–æ–≤–µ—Ä—é –µ—ë –∏ –ø—Ä–∏—à–ª—é –æ—Ç—á—ë—Ç (.xlsx)."
    )

@router.message()
async def handle_text(message: types.Message):
    text = message.text.strip()
    if not text:
        await message.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ ‚Äî –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
        return

    if text.startswith("https://t.me/"):
        text = await fetch(text)
        if not text:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ —Å—Å—ã–ª–∫–∏.")
            return

    try:
        async with httpx.AsyncClient(timeout=5.0) as client:
            resp = await client.post(REPORT_ENDPOINT, json={"text": text})
            if resp.status_code != 200:
                await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {resp.status_code} {resp.text}")
                return
            data = resp.json()

        incidents = data.get("incidents", [])
        total_risk = data.get("total_risk", 0)
        risk_level = data.get("risk_level", "low")
        xlsx_base64 = data.get("xlsx_base64")

        # 1. –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        category_map = {
            "general": "üü¢",
            "privacy": "üî¥",
            "finance": "üü°",
            "marketing": "üîµ",
            "hidden": "üü†"
        }

        if incidents:
            category_messages = []
            for cat, emoji in category_map.items():
                cat_incidents = [i['message'] for i in incidents if i.get('category') == cat]
                if cat_incidents:
                    category_messages.append(f"{emoji} *{cat.capitalize()}*:\n- " + "\n- ".join(cat_incidents))

            await message.answer(
                f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(incidents)} –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π.\n"
                f"–°—É–º–º–∞—Ä–Ω—ã–π —Ä–∏—Å–∫: {total_risk}\n"
                f"–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_level}\n\n" + "\n\n".join(category_messages),
                parse_mode="Markdown"
            )
        else:
            await message.answer(f"‚úÖ –ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°—É–º–º–∞—Ä–Ω—ã–π —Ä–∏—Å–∫: {total_risk}, —É—Ä–æ–≤–µ–Ω—å: {risk_level}")

        # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —á–µ—Ä–µ–∑ GigaChat
        if incidents:
            try:
                recs_ai = await generate_recommendation(text, incidents)
                safe_recs = escape_markdown(recs_ai)
                await message.answer(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –Ω–∞—Ä—É—à–µ–Ω–∏–π:\n{safe_recs}", parse_mode="MarkdownV2")
            except Exception as e:
                await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç GigaChat: {e}")

        # 3. –û—Ç–ø—Ä–∞–≤–∫–∞ XLSX
        if xlsx_base64:
            xlsx_bytes = base64.b64decode(xlsx_base64)
            with tempfile.NamedTemporaryFile(suffix=".xlsx", delete=False) as tmp_file:
                tmp_file.write(xlsx_bytes)
                tmp_file_path = tmp_file.name

            await message.answer_document(FSInputFile(tmp_file_path, filename="report.xlsx"))
            os.remove(tmp_file_path)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å API: {e}")

# ====== –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ======
async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
